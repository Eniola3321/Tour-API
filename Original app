/*import fs from 'fs';
import express from 'express';
import module from 'module';
import morgan from 'morgan';
const app = express();
//1) MIDDLEWARES
app.use(morgan('dev'));
app.use(express.json());
app.use((req, res, next) => {
  console.log('Hello from there! middleware');
  next();
});
app.use((req, res, next) => {
  req.requestTime = new Date().toISOString();
  next();
});
const port = 1220;
const tours = JSON.parse(
  fs.readFileSync('./dev-data/data/tours-simple.json', 'utf-8')
);
const users = JSON.parse(
  fs.readFileSync('./dev-data/data/users.json', 'utf-8')
);
//2) ROUTES & Route Handlers
app.get('/api/v1/tours', (req, res) => {
  res.status(200).json({
    status: 'sucess',
    requestAt: req.requestTime,
    result: tours.length,
    data: {
      tours,
    },
  });
});

app.post('/api/v1/tours', (req, res) => {
  const newID = tours[tours.length - 1].id + 1;
  const newTour = Object.assign({ newID }, req.body);
  tours.push(newTour);
  fs.writeFile(
    './dev-data/data/tours-simple.json',
    JSON.stringify(tours),
    (err) => {
      res.status(201).json({
        status: 'sucess',
        data: {
          tour: newTour,
        },
      });
    }
  );
});
app.get('/api/v1/tours/:id', (req, res) => {
  console.log(req.params);
  const id = req.params.id * 1;
  const tour = tours.find((el) => el.id === id);
  // if (!tour) {
  if (id > tours.length) {
    res.status(404).json({ status: 'fail', msg: 'Invalid Tour' });
  }
  res.status(200).json({
    status: 'sucess',
    data: {
      tour: tour,
    },
  });
});
app.patch('/api/v1/tours/:id', (req, res) => {
  if (req.params.id * 1 > tours.length) {
    res.status(404).json({ status: 'fail', msg: 'Invalid Tour' });
  }
  res.status(200).json({
    status: 'success',
    data: {
      tour: '< Updated tour here... >',
    },
  });
});
app.get('/api/v1/users', (req, res) => {
  res.status(200).json({
    status: 'success',
    data: {
      users: users,
    },
  });
});
app.post('/api/v1/users', (req, res) => {
  const newID = tours[tours.length - 1].id + 1;
  const newUser = Object.assign({ newID }, req.body);
  users.push(newUser);
  fs.writeFile('./dev-data/data/users.json', JSON.stringify(users), (err) => {
    res.status(201).json({
      status: 'sucess',
      data: {
        user: newUser,
      },
    });
  });
});
app.get('/api/v1/users/:user', (req, res) => {
  const name = req.params.user * '';
  const user = tours.find((el) => el.name === name);
  res.status(200).json({
    status: 'success',
    data: {
      user: user,
    },
  });
});
//3) START SERVER
app.listen(port, () => {
  console.log(`App is running on ${port}`);
});
*/
